WebGL学习笔记：

1. `WebGL`程序包括运行在浏览器中的 JavaScript 和运行在 WebGL 系统的着色器程序这两个部分

2. 顶点着色器程序和 C 语言程序一样，必须包含一个 main() 函数。main() 函数前面的 void 标识这个函数不会有返回值。还有，你不能为 main() 指定参数。

3. gl.drawArrays(mode, first, count) 执行顶点着色器，按照 mode 参数指定的方式绘制图形。

    mode：指定绘制的方式，可接收以下常亮符号：

    - gl.POINTS 点
    - gl.LINES 线段
    - gl.LINE_STRIP 线条
    - gl.LINE_LOOP 回路
    - gl.TRIANGLES 三角形
    - gl.TRIANGLE_STRIP 三角带
    - gl.TRIANGLE_FAN 三角扇

    first：指定从哪个顶点开始绘制（整数型）
    count：指定绘制需要用到多少个顶点（整数型）

    返回值：无
    错误：
        INVALID_ENUM：传入的 mode 参数不是前述参数之一
        INVALID_VALUE：参数 first 或 count 是负数

4. WebGL 不需要交换颜色缓冲区

5. 存储限定符

    使用`attribute变量`和`uniform变量`将位置信息从 JavaScript 程序中传给顶点着色器。具体使用哪一种取决于需传输的数据本身，attribute 变量传输的是那些与顶点相关的数据，而 uniform 变量传输的是那些对于所有顶点都相同（或与顶点无关）的数据。

    attribute 变量是一种 GLSL ES变量，被用来从外部向顶点着色器内传输数据，只有顶点着色器能使用它。

6. 同族函数 gl.vertexAttrib[1234]f()

    gl.vertexAttrib1f(location, v0)
    gl.vertexAttrib2f(location, v0, v1)
    gl.vertexAttrib3f(location, v0, v1, v2)
    gl.vertexAttrib4f(location, v0, v1, v2, v3)

    将数据传输给 location 参数指定的 attribute 变量。gl.vertexAttrib1f() 仅传输一个值，这个值江北填充到 attribute 变量的第一个分量中，第2，3个分量江北设为0.0，第4个分量将被设为1.0。类似地，gl.vertexAttrib2f()将填充前两个分量，第3个分量为0.0，第4个分量为1.0。gl.vertexAttrib4f()填充了所有4个分量。

    参数
        location：指定 attribute 变量的存储位置
        v1,v2,v3,v4 指定传输给 attribute 变量的四个分量的值

    返回值：无

    错误：INVALID_VALUE:location大于等于 attribute 变量的最大数目（默认为8）

7. 同族函数 gl.uniform[1234]f()

    gl.uniform1f(location, v1)
    gl.uniform2f(location, v1, v2)
    gl.uniform3f(location, v1, v2, v3)
    gl.uniform4f(location, v1, v2, v3, v4)

    将数据（v0, v1, v2, v3）传输给由 location 参数指定的 uniform 变量。同 gl.vertexAttrib[1234]f()

    参数
        location：指定将要修改的 uniform 变量的存储位置
        v1,v2,v3,v4 指定传输给 uniform 变量的四个分量的值

    返回值：无

    错误：INVALID_OPERATION:没有当前 program 对象，或者 location 是非法的变量存储位置

8. 缓冲区对象：WebGL 系统中的一块内存区域，我们可以一次性地向缓冲区对象中填充大量的顶点数据，然后将这些数据保存在其中，供顶点着色器使用。

9. 使用缓冲区对象向顶点着色器传入多个顶点的数据，需要遵循以下五个步骤：

    - 创建缓冲区对象（gl.createBuffer()）
    - 绑定缓冲区对象（gl.bindBuffer()）
    - 将数据写入缓冲区对象（gl.bufferData()）
    - 将缓冲区对象分配给一个 attribute 变量（gl.vertexAttribPointer()）
    - 开启 attribute 变量（gl.enableVertexAttribArray()）

10. 类型化数组

    - ...
    - Float32Array 单精度32位浮点数（float）
    - Float64Array 双精度32位浮点数（double）

    类型化数组同普通数组(Array)相似，也拥有一系列属性和方法（包括一个常量属性），但不同的是它不支持 push() 和 pop() 方法。

    创建类型化数组的唯一方法是使用 new 关键字。

    get(index) 获取第 index 个元素位
    set(index, value) 设置第 index 个元素的值为 value
    set(array， offset) 从第 offset 个元素开始将数组 array 中的值填充进去
    length 数组的长度
    BYTES_PER_ELEMENT 数组中每个元素所占的字节数

11. 绕 Z 轴旋转 β 角度，程序调用旋转的相关函数时也不会传入一个表示旋转方向的参数，因为我们都默认遵循右手法则：如果旋转的角度是正值，那就是逆时针旋转。

    x' = x cosβ - y sinβ
    y' = x sinβ + y cosβ
    z' = z

12. 齐次坐标 new Float32Array([x, y, z, w])

    当 w 为1.0时，x,y,z可表示三维坐标
    当 w 趋近于0时，x,y,z无穷远

13. 矢量：由多个分量组成的对象，比如顶点的坐标(0.0, 0.5, 1.0)

14. 矩阵：矩阵是一个矩形的二维数组，数字按照行（水平方向）和列（垂直方向）排列，数字两侧的方括号表示这些数字是一个整体（一个矩阵）。

    注意 WebGL 中矩阵是列主序的

```
  // 创建旋转矩阵
  var radian = Math.PI * ANGLE / 180.0 // 角度值转为弧度制
  var cosB = Math.cos(radian)
  var sinB = Math.sin(radian)
  var xformMatrix = new Float32Array([
    cosB, sinB, 0.0, 0.0,
    -sinB, cosB, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.0,
    0.0, 0.0, 0.0, 1.0
  ])

  // 创建平移矩阵
  var Tx = 0.5
  var Ty = 0.5
  var Tz = 0.0
  var xformMatrix = new Float32Array([
    1.0, 0.0, 0.0, 0.0,
    0.0, 1.0, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.0,
    Tx, Ty, Tz, 1.0
  ])

  // 创建缩放矩阵
  var Sx = 1.0
  var Sy = 1.5
  var Sz = 1.0
  var xformMatrix = new Float32Array([
    Sx, 0.0, 0.0, 0.0,
    0.0, Sy, 0.0, 0.0,
    0.0, 0.0, Sz, 0.0,
    0.0, 0.0, 0.0, 1.0
  ])
```




