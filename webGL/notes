WebGL学习笔记：

1. `WebGL`程序包括运行在浏览器中的 JavaScript 和运行在 WebGL 系统的着色器程序这两个部分

2. 顶点着色器程序和 C 语言程序一样，必须包含一个 main() 函数。main() 函数前面的 void 标识这个函数不会有返回值。还有，你不能为 main() 指定参数。

3. gl.drawArrays(mode, first, count) 执行顶点着色器，按照 mode 参数指定的方式绘制图形。

    mode：指定绘制的方式，可接收以下常亮符号：

    - gl.POINTS 点
    - gl.LINES 线段
    - gl.LINE_STRIP 线条
    - gl.LINE_LOOP 回路
    - gl.TRIANGLES 三角形
    - gl.TRIANGLE_STRIP 三角带
    - gl.TRIANGLE_FAN 三角扇

    first：指定从哪个顶点开始绘制（整数型）
    count：指定绘制需要用到多少个顶点（整数型）

    返回值：无
    错误：
        INVALID_ENUM：传入的 mode 参数不是前述参数之一
        INVALID_VALUE：参数 first 或 count 是负数

4. WebGL 不需要交换颜色缓冲区

5. 存储限定符

    使用`attribute变量`和`uniform变量`将位置信息从 JavaScript 程序中传给顶点着色器。具体使用哪一种取决于需传输的数据本身，attribute 变量传输的是那些与顶点相关的数据，而 uniform 变量传输的是那些对于所有顶点都相同（或与顶点无关）的数据。

    attribute 变量是一种 GLSL ES变量，被用来从外部向顶点着色器内传输数据，只有顶点着色器能使用它。

6. 同族函数 gl.vertexAttrib[1234]f()

    gl.vertexAttrib1f(location, v0)
    gl.vertexAttrib2f(location, v0, v1)
    gl.vertexAttrib3f(location, v0, v1, v2)
    gl.vertexAttrib4f(location, v0, v1, v2, v3)

    将数据传输给 location 参数指定的 attribute 变量。gl.vertexAttrib1f() 仅传输一个值，这个值江北填充到 attribute 变量的第一个分量中，第2，3个分量江北设为0.0，第4个分量将被设为1.0。类似地，gl.vertexAttrib2f()将填充前两个分量，第3个分量为0.0，第4个分量为1.0。gl.vertexAttrib4f()填充了所有4个分量。

    参数
        location：指定 attribute 变量的存储位置
        v1,v2,v3,v4 指定传输给 attribute 变量的四个分量的值

    返回值：无

    错误：INVALID_VALUE:location大于等于 attribute 变量的最大数目（默认为8）

7. 同族函数 gl.uniform[1234]f()

    gl.uniform1f(location, v1)
    gl.uniform2f(location, v1, v2)
    gl.uniform3f(location, v1, v2, v3)
    gl.uniform4f(location, v1, v2, v3, v4)

    将数据（v0, v1, v2, v3）传输给由 location 参数指定的 uniform 变量。同 gl.vertexAttrib[1234]f()

    参数
        location：指定将要修改的 uniform 变量的存储位置
        v1,v2,v3,v4 指定传输给 uniform 变量的四个分量的值

    返回值：无

    错误：INVALID_OPERATION:没有当前 program 对象，或者 location 是非法的变量存储位置

8. 缓冲区对象：WebGL 系统中的一块内存区域，我们可以一次性地向缓冲区对象中填充大量的顶点数据，然后将这些数据保存在其中，供顶点着色器使用。

9. 使用缓冲区对象向顶点着色器传入多个顶点的数据，需要遵循以下五个步骤：

    - 创建缓冲区对象（gl.createBuffer()）
    - 绑定缓冲区对象（gl.bindBuffer()）
    - 将数据写入缓冲区对象（gl.bufferData()）
    - 将缓冲区对象分配给一个 attribute 变量（gl.vertexAttribPointer()）
    - 开启 attribute 变量（gl.enableVertexAttribArray()）

10. 类型化数组

    - ...
    - Float32Array 单精度32位浮点数（float）
    - Float64Array 双精度32位浮点数（double）

    类型化数组同普通数组(Array)相似，也拥有一系列属性和方法（包括一个常量属性），但不同的是它不支持 push() 和 pop() 方法。

    创建类型化数组的唯一方法是使用 new 关键字。

    get(index) 获取第 index 个元素位
    set(index, value) 设置第 index 个元素的值为 value
    set(array， offset) 从第 offset 个元素开始将数组 array 中的值填充进去
    length 数组的长度
    BYTES_PER_ELEMENT 数组中每个元素所占的字节数

11. 绕 Z 轴旋转 β 角度，程序调用旋转的相关函数时也不会传入一个表示旋转方向的参数，因为我们都默认遵循右手法则：如果旋转的角度是正值，那就是逆时针旋转。

    x' = x cosβ - y sinβ
    y' = x sinβ + y cosβ
    z' = z

12. 齐次坐标 new Float32Array([x, y, z, w])

    当 w 为1.0时，x,y,z可表示三维坐标
    当 w 趋近于0时，x,y,z无穷远

13. 矢量：由多个分量组成的对象，比如顶点的坐标(0.0, 0.5, 1.0)

14. 矩阵：矩阵是一个矩形的二维数组，数字按照行（水平方向）和列（垂直方向）排列，数字两侧的方括号表示这些数字是一个整体（一个矩阵）。

    注意 WebGL 中矩阵是列主序的

```
  // 创建旋转矩阵
  var radian = Math.PI * ANGLE / 180.0 // 角度值转为弧度制
  var cosB = Math.cos(radian)
  var sinB = Math.sin(radian)
  var xformMatrix = new Float32Array([
    cosB, sinB, 0.0, 0.0,
    -sinB, cosB, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.0,
    0.0, 0.0, 0.0, 1.0
  ])

  // 创建平移矩阵
  var Tx = 0.5
  var Ty = 0.5
  var Tz = 0.0
  var xformMatrix = new Float32Array([
    1.0, 0.0, 0.0, 0.0,
    0.0, 1.0, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.0,
    Tx, Ty, Tz, 1.0
  ])


  // 创建缩放矩阵
  var Sx = 1.0
  var Sy = 1.5
  var Sz = 1.0
  var xformMatrix = new Float32Array([
    Sx, 0.0, 0.0, 0.0,
    0.0, Sy, 0.0, 0.0,
    0.0, 0.0, Sz, 0.0,
    0.0, 0.0, 0.0, 1.0
  ])
```

15. 模型变换：一个模型可能经过了多次变换，将这些变换全部复合成一个等效的变换，就得到了模型变换，或称建模变换，相应的，模型变换的矩阵称为模型矩阵。

16. 在 WebGL 中，如果顶点着色器与片元着色器中有类型和命名都相同的 varying 变量，那么顶点着色器赋给该变量的值就会被自动地传入片元着色器。

17. 片元着色器里面必须申明浮点数的精度才能正常编译，否则回报错：

    Failed to compile shader: ERROR: 0:3: 'GL_ES' : unexpected token after conditional expression

    使用 #ifdef GL_ES ... #endif GL_ES 也会导致这个问题。目前未知原因。

    申明浮点数精度的方法：

    ```
    precision mediump float；
    ```

18. 在顶点着色器和片元着色器之间，有以下两个步骤：

    - 图形装配过程：这一步的任务是将孤立的顶点坐标装配成几何图形。几何图形的类别由 gl.drawArrays() 函数的第一个参数决定。
    - 光栅化过程：这一步的任务是将装配好的几何图形转化为片元。

19. 光栅化：将顶点着色器逐次装配出来的点所组成的图形转化为片元的过程。

    它负责将矢量的几何图形转变为栅格化的片元（像素）。

20. 片元数量就是光栅化后的图形最终在屏幕上所覆盖的像素数。

21. RGBA中的 R 值从1.0降低为0.0，而 B 值则从0.0上升至1.0，线段上的所有片元的颜色值都会被恰当地计算出来——这个过程就被称为`内插过程`。每一个 varying 变量都会经过这样的内插过程。

22. 纹理映射的作用，就是根据纹理图像，为之前光栅化后的每个元素涂上合适的颜色。组成纹理图像的像素又被称为`纹素`，每一个纹素的颜色都使用 RGB 或 RGBA 格式编码。

23. 出于安全性考虑，webGL 不允许使用跨域纹理图像。

24. 在 webGL 中，没法直接操作纹理对象，必须通过将纹理对象绑定到纹理单元上，然后通过操作纹理单元来操作纹理对象。webGL 通过一种称作`纹理单元`的机制来同时使用多个纹理。每个纹理单元有一个单元编号来管理一张纹理图像。即使只需要使用一张纹理图像，也得为其指定一个纹理单元。

    必须将着色器中表示纹理对象的 uniform 变量申明为一种特殊的、专用于纹理对象的数据类型。如：

        - sampler2D 绑定到 gl.TEXTURE_2D 上的纹理数据类型
        - samplerCube 绑定到 gl.TEXTURE_CUBE_MAP 上的纹理数据类型

25. 配置纹理对象的参数 gl.texParameteri(target, pname, param)

    将 param 的值赋给绑定到目标的纹理对象的 pname 参数上。

    参数：
    target： gl.TEXTURE 或 gl.TEXTURE_CUBE_MAP
    pname: 纹理参数

        - gl.TEXTURE_MAG_FILTER 放大方法：这个参数表示当纹理的绘制范围比纹理本身更大时，如何获取纹素颜色。比如：将16×16的纹理图像映射到32×32像素的空间里时，纹理的尺寸就变成了原始的两倍。WebGL 需要填充由于放大而造成的像素间的空隙，该参数就表示填充这些空隙的具体方法。
        - gl.TEXTURE_MIN_FILTER 缩小方法：这个参数表示当纹理的绘制范围比纹理本身更小时，如何获取纹素颜色。比如：将32×32的纹理图像映射到16×16像素的空间里时，纹理的尺寸就变成了原始的一半。WebGL 需要剔除纹理图像中的部分像素，该参数就表示具体的剔除像素的方法。
        - gl.TEXTURE_WRAP_S 水平填充方法：这个参数表示如何对纹理图像左侧或右侧的区域进行填充。
        - gl.TEXTURE_WRAP_T 垂直填充方法：这个参数表示如何对纹理图像上方和下方的区域进行填充。

    param： 纹理参数的值

        以下可以赋值给 gl.TEXTURE_MAG_FILTER 和 gl.TEXTURE_MIN_FILTER 的非金字塔纹理类型常量
        - gl.NEAREST 使用原纹理上距离映射后像素（新像素）中心最近的那个像素的颜色值作为新像素的值。
        - gl.LINEAR 使用距离新像素中心最近的四个像素的颜色值的加权平均作为新像素的值（与 gl.NEAREST 相比，该方法图像质量更好，但是会有较大的开销。）

        以下可以赋值给 gl.TEXTURE_WRAP_S 和 gl.TEXTURE_WRAP_T 的常量
        - gl.REPEAT 平铺式的重复纹理
        - gl.MIRRORED_REPEAT 镜像对称式的重复纹理
        - gl.CLAMP_TO_EDGE 使用纹理图像边缘值

    返回值： 无

    错误：INVALID_ENUM target 不是合法的值
    INVALID_OPERATION 当前目标上没有绑定纹理对象

    pname 与 param 对应关系：
    gl.TEXTURE_MAG_FILTER 默认值 gl.LINEAR
    gl.TEXTURE_MIN_FILTER 默认值 gl.NEAREST_MIPMAP_LINEAR
    gl.TEXTURE_WRAP_S 默认值 gl.REPEAT
    gl.TEXTURE_WRAP_T 默认值 gl.REPEAT

26. 将纹理图像分配给纹理对象 gl.rexImage2D(target, level, internalformat, format, type, image)

    将 image 指定的图像分配给绑定到目标上的纹理对象

    参数：
    target gl.TEXTURE_2D 或 gl.TEXTURE_CUBE_MAP
    level 传入0（该参数是为金字塔纹理准备的）
    internalformat 图像的内部格式
    format 纹理数据的格式，必须使用与 internalformat 相同的值
    type 纹理数据的类型，见下面“纹理数据的数据格式”
    image 包含纹理图像的 Image 对象

    返回值：无

    错误：
    INVALID_ENUM target不是合法的值
    INVALID_OPERATION 当前目标上没有绑定纹理对象

    关于 format 参数表示的纹理数据的格式，必须根据纹理图像的格式来选择这个参数。

        - jpg、BMP 使用 gl.RGB
        - PNG 使用 gl.RGBA
        - gl.LUMINANCE 和 gl.LUMINANCE_ALPHA 通常用在灰度图像上
        - 等等

    format 格式：

        - gl.RGB 红、绿、蓝
        - gl.RGBA 红、绿、蓝、透明度
        - gl.ALPHA (0.0, 0.0, 0.0, 透明度)
        - gl.LUMINANCE L、L、L、1L：流明
        - gl.LUMINANCE_ALPHA L、L、L，透明度

        这里的流明表示我们感知到的物体表面的亮度。通常使用物体表面红、绿、蓝颜色分量值的加权平均来计算流明。

    纹理数据的数据格式

        通常我们使用 gl.UNSIGNED_BYTE 数据类型。当然也可以使用其他数据类型，如 gl.UNSIGNED_SHORT_5_6_5 (将 RGB 三分量压缩入16比特中)。后面的集中数据格式通常被用来压缩数据，以减少浏览器加载图像的时间。

        - gl.UNSIGNED_BYTE 无符号整型，每个颜色分量占据1字节
        - gl.UNSIGNED_SHORT_5_6_5 RGB：每个分量分别占据5、6、5比特
        - gl.UNSIGNED_4_4_4_4 RGBA：每个分量分别占据4、4、4、4比特
        - gl.UNSIGNED_5_5_5_1 RGBA：RGB 每个分量各占据5比特，A 分量占据1比特

27. GLSL ES 内置函数 texture2D(sampler2D sampler, vec2 coord)

    从 sampler 指定的纹理上获取 coord 指定的纹理坐标处的像素颜色。

    参数：
    sampler 指定纹理单元编号，sampler2D 类型
    coord 指定纹理坐标，vec2 类型

    返回值：纹理坐标处像素的颜色值，其格式由 gl.texImage2D() 的 internalformat 参数决定。如果由于某些原因导致纹理图像不可使用，那就返回（0.0，0.0，0.0，1.0）

    不同 internalformat 参数下的返回值：
    gl.RGB (R, G, B, 1.0)
    gl.RGBA (R, G, B, A)
    gl.ALPHA (0.0, 0.0, 0.0, A)
    gl.LUMINANCE (L, L, L, 1.0)
    gl.LUMINANCE_ALPHA (L, L, L, A)

28. GLSL ES 对大小写敏感，且语句结束要加英文分号。它是强类型语言。

29. 我们将观察者所处的位置成为`视点`，从视点出发沿着观察者方向的视线称作`视线`。

30. “根据自定义的观察者状态，绘制观察者看到的景象”与“使用默认的观察状态，但是对三维对象进行平移、旋转等变换，再绘制观察者看到的景象”，这两种行为是等价的。

    移动视点与移动被观察对象等效。

31. 水平视角，垂直视角和科室深度，定义了可视空间。

    - 长方体可视空间，也称盒装空间，由正射投影产生。
    - 四凌锥/金字塔可视空间，由透视投影产生。

32. 漫反射光计算公式：<漫反射光颜色> = <入射光颜色> × <表面基底色> × cosθ

    cosθ表示入射角：入射光与表面的法线形成的夹角。

    法线：表面的朝向。即垂直于表面的方向，又称法线或法向量。法向量有三个分量，向量（nx,ny,nz）表示从原点（0,0,0）指向点（nx,ny,nz）的方向

    环境反色光计算公式：<环境反色光颜色> = <入射光颜色(此处也叫环境光颜色)> × <表面基底色>

    当漫反射和环境反射同时存在时，将两者加起来，就会得到物体最终被观察到的颜色：<表面的反射光颜色> = <漫反射光颜色> + <环境反射光颜色>

    平行光下的漫反射：<漫反射光颜色> = <入射光颜色> × <表面基底色> × cosθ

    利用点积运算求 cosθ，再改写上面的等式：<漫反射光颜色> = <入射光颜色> × <表面基底色> × (<光线方向> · <法线方向>)

    时尚上面的等式有两点需要注意：1 光线方向矢量和表面法线矢量的长度必须为1，否则反射光的颜色就会过暗或过亮；2 所谓的“光线方向”，实际上是入射方向的反方向，即从入射点指向光源方向（因为这样，该方向与法线方向的夹角才是入射角）

    环境光下的漫反射：<环境反射光颜色> = <入射光颜色> × <表面基底色>

    <表面的反射光颜色> = <漫反射光颜色> + <环境反射光颜色>

33. 魔法矩阵：逆转置矩+阵

    法向量乘以模型矩阵的逆转置矩阵，就可以求得变换后的法向量。

    逆矩阵的含义是，如果矩阵 M 的逆矩阵是 R，那么 R * M 或 M * R 的结果都是单位矩阵。转置的意思是，将矩阵的行列进行调换（看上去就像是沿着左上-右下对角线进行了翻转。）

    所谓的逆转置矩阵，就是逆矩阵的转置。

    求逆转置矩阵的步骤：1 求原矩阵的逆矩阵；2 将上一步得到的逆矩阵进行转置。
