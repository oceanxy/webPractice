@charset "UTF-8";
nav span {
  color: blue;
}
nav ul {
  color: red;
}
nav p {
  color: blue;
}

/*
//css
nav a{
  color: blue;
}
nav ul{
  color: red;
}
nav p{
  color: blue;
}
*/
#top_nav a, #top_nav .disabled {
  padding: 0 10px;
  color: #fff;
}
#top_nav a:hover, #top_nav .disabled:hover, #top_nav .hoverlink {
  color: #ddd;
}

.wrap {
  font-size: 14px;
  font-weight: bold;
}

.radius1 {
  -webkit-border-radius: 3px;
  border-radius: 3px;
}

.radius3 {
  -webkit-border-radius: 3px;
  border-radius: 3px;
}

.radius20 {
  -webkit-border-radius: 20px;
  border-radius: 20px;
}

.box {
  width: 100px;
  height: 200px;
}

.box2 {
  width: 100px;
  height: 200px;
}

.box-shadow {
  border: 1px solid #ccc;
  -webkit-box-shadow: 0 2px 2px red, 0 3px 3px blue, 0 4px 4px yellow;
  box-shadow: 0 2px 2px red, 0 3px 3px blue, 0 4px 4px yellow;
}

.disabled {
  color: gray;
}

a:hover, .disabled:hover, .hoverlink {
  text-decoration: underline;
}

.one, .two {
  width: 100px;
  height: 100px;
}

.two {
  background: red;
  border: 5px solid #000;
}

.three, .two {
  padding: 10px;
}

.btn, .block {
  margin: 5px;
}

.btn, .block span {
  padding: 5px;
}

/*
//css
//此处没有编译scss中的占位选择器%bgd
.btn, .block {
  margin: 5px;
}

.btn, .block span {
  padding: 5px;
}
*/
/*
  SassScript支持的6种数据类型
    数字（例如 1.2、13、10px）
    文本字符串，无论是否有引号（例如 "foo"、'bar'、baz）
    颜色（例如 blue、#04a3f9、rgba(255, 0, 0, 0.5)）
    布尔值（例如 true、false）
    空值（例如 null）
    值列表，用空格或逗号分隔（例如 1.5em 1em 0 2em、Helvetica, Arial, sans-serif）

  SassScript 还支持所有其他 CSS 属性值类型
    例如 Unicode 范围和 !important 声明。
    然而，它不会对这些类型做特殊处理。 它们只会被当做不带引号的字符串看待。
*/
/*
  列表函数
    nth函数（nth function） 可以直接访问值列表中的某一项；
    join函数（join function） 可以将多个值列表连结在一起；
    append函数（append function） 可以在值列表中添加值；
    @each规则（@each rule） 则能够给值列表中的每个项目添加样式。
*/
/*
  #｛｝  插值语句
    使用 #｛｝插值语句 (interpolation) 时，有引号字符串将被编译为无引号字符串
    如果你希望在纯 CSS 中使用变量和 /， 你可以用 #｛｝ 包住变量。 例如
*/
p {
  font: 12px/30px;
}

/*
//css
p {
  font: 12px/30px;
}
*/
p:before {
  content: "I ate 15 pies!";
}

/*
//css
p:before {
  content: "I ate 15 pies!";
}
*/
p {
  cursor: e-resize;
}

/*
//css
p {
  cursor: e-resize;
}
*/
p:before {
  content: "Foo Bar";
  font-family: sans-serif;
}

/*
//css
p:before {
  content: "Foo Bar";
  font-family: sans-serif;
}
*/
p:before {
  content: "I ate  pies!";
}

/*
//css
p:before {
  content: "I ate  pies!";
}
*/
/*
  除非你的代码中有偏复杂的逻辑，否则没必要在日常开发的样式表中使用条件语句。实际上，条件语句主要适用于库和框架。
  无论何时，如果你感觉需要它们，请遵守下述准则：

  除非必要，不然不需要括号；
  务必在 @if 之前添加空行；
  务必在左开大括号( { )后换行；
  @else 语句和它前面的右闭大括号( } )写在同一行；
  务必在右闭大括号( } )后添加空行，除非下一行还是右闭大括号( } )，那么就在最后一个右闭大括号( } )后添加空行。
*/
p {
  border: 1px solid;
}

/*
//css
p {
  border: 1px solid;
}
*/
p {
  width: 30px;
}

/*
//css
p {
  width: 30px;
}
*/
/*
  if($condition, $condition_true, $condition_false)
  三个参数分别表示：条件，条件为真的值，条件为假的值。
*/
p {
  font-weight: bold;
}

/*
//css
p {
  font-weight: bold;
}
*/
.item-1 {
  width: 2em;
}

.item-2 {
  width: 4em;
}

.item-3 {
  width: 6em;
}

/*
//css
.item-1 {
  width: 2em;
}

.item-2 {
  width: 4em;
}

.item-3 {
  width: 6em;
}
*/
.item-1 {
  width: 2em;
}

.item-2 {
  width: 4em;
}

/*
//css
.item-1 {
  width: 2em;
}
.item-2 {
  width: 4em;
}
*/
.puma-icon {
  background-image: url("/course/565c0c2abc27d77730c072b3/img/puma.png");
}

.egret-icon {
  background-image: url("/course/565c0c2abc27d77730c072b3/img/egret.png");
}

.salamander-icon {
  background-image: url("/course/565c0c2abc27d77730c072b3/img/salamander.png");
}

/*
//css
.puma-icon {
  background-image: url('/course/565c0c2abc27d77730c072b3/img/puma.png');
}
.egret-icon {
  background-image: url('/course/565c0c2abc27d77730c072b3/img/egret.png');
}
.salamander-icon {
  background-image: url('/course/565c0c2abc27d77730c072b3/img/salamander.png');
}
*/
.item-6 {
  width: 12em;
}

.item-4 {
  width: 8em;
}

.item-2 {
  width: 4em;
}

/*
//css
.item-6 {
  width: 12em;
}
.item-4 {
  width: 8em;
}
.item-2 {
  width: 4em;
}
*/

/*# sourceMappingURL=test.css.map */
