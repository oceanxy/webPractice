@charset "utf-8";

//参考文档http://www.ruanyifeng.com/blog/2012/06/sass.html

//定义变量
//scss
$width: 10px !default; //默认变量
$height: 10px !global; //全局变量
$color: blue;//定义变量1
nav {
  span{
    color: $color;
  }
  ul {
    $color: red;//定义局部变量2,此处不会改变变量1（$color: blue）的值。
    color: $color;
  }
  p{
    color: $color;
  }
}
/*
//css
nav a{
  color: blue;
}
nav ul{
  color: red;
}
nav p{
  color: blue;
}
*/

//选择器嵌套
//请最终编译CSS是这样的 #top_nav a{ padding: 0 10px; color: #fff; } #top_nav a:hover{ color:#ddd; }
#top_nav {
  a {
    padding: 0 10px;
    color: #fff;
    &:hover { //父级（a元素）的hover状态
      color: #ddd;
    }
  }
}

//属性嵌套
//最终编译CSS是这样的 .wrap { font-size: 14px; font-weight: bold; }
.wrap {
  font: {
    size: 14px;
    weight: bold;
  }
}

//混合申明
//最终编译CSS是这样的 .btn { -webkit-border-radius: 3px; border-radius: 3px; }把一个按钮设置成3px圆角。
//1，无参数
@mixin radius1 {
  -webkit-border-radius: 3px;
  border-radius: 3px;
}

.radius1 {
  @include radius1;
}

//2,有参数
@mixin radius2($radius:3px) {
  -webkit-border-radius: $radius;
  border-radius: $radius;
}

.radius3 {
  @include radius2; //使用默认值
}

.radius20 {
  @include radius2(20px); //传递自定义参数
}

//3，多个参数
//声明一个混合boxSize，有两个参数高度和宽度，在.box中调用此混合并为赋值宽度100px，高度200px。编译生成的css为 .box { width: 100px; height: 200px; }
@mixin boxSize($width:10px, $height:100px) {
  width: $width;
  height: $height;
}

.box {
  @include boxSize(100px, 200px);
}
//另一种写法
.box2 {
  @include boxSize($width: 100px, $height: 200px);
}

//4,多组值参数
@mixin box-shadow($shadow...) {
  -webkit-box-shadow: $shadow;
  box-shadow: $shadow;
}
.box-shadow {
  border: 1px solid #ccc;
  @include box-shadow(0 2px 2px red, 0 3px 3px blue, 0 4px 4px yellow);
}

//继承
//继承a元素
.disabled {
  color: gray;
  @extend a;
}
//继承a元素的hover状态
.hoverlink {
  @extend a:hover;
}
a:hover {
  text-decoration: underline;
}

//继承多个选择器
.one {
  @include boxSize(100px, 100px); //使用混合
}
.two {
  @extend .one;
  @extend .three;
  background: red;
  border: 5px solid #000;
}
.three {
  padding: 10px;
}

//选择器占位符 %
//没有被继承的选择器占位不会被编译成css
//scss
%bgd {
  background: #fff;
}

%mar {
  margin: 5px;
}

%pad {
  padding: 5px;
}

.btn {
  @extend %mar;
  @extend %pad;
}

.block {
  @extend %mar;
  span {
    @extend %pad;
  }
}

/*
//css
//此处没有编译scss中的占位选择器%bgd
.btn, .block {
  margin: 5px;
}

.btn, .block span {
  padding: 5px;
}
*/

/*
  SassScript支持的6种数据类型
    数字（例如 1.2、13、10px）
    文本字符串，无论是否有引号（例如 "foo"、'bar'、baz）
    颜色（例如 blue、#04a3f9、rgba(255, 0, 0, 0.5)）
    布尔值（例如 true、false）
    空值（例如 null）
    值列表，用空格或逗号分隔（例如 1.5em 1em 0 2em、Helvetica, Arial, sans-serif）

  SassScript 还支持所有其他 CSS 属性值类型
    例如 Unicode 范围和 !important 声明。
    然而，它不会对这些类型做特殊处理。 它们只会被当做不带引号的字符串看待。
*/

/*
  列表函数
    nth函数（nth function） 可以直接访问值列表中的某一项；
    join函数（join function） 可以将多个值列表连结在一起；
    append函数（append function） 可以在值列表中添加值；
    @each规则（@each rule） 则能够给值列表中的每个项目添加样式。
*/

/*
  #｛｝  插值语句
    使用 #｛｝插值语句 (interpolation) 时，有引号字符串将被编译为无引号字符串
    如果你希望在纯 CSS 中使用变量和 /， 你可以用 #｛｝ 包住变量。 例如
*/
//scss
p {
  $font-size: 12px;
  $line-height: 30px;
  font: #{$font-size}/#{$line-height};
}
/*
//css
p {
  font: 12px/30px;
}
*/

//在文本字符串中，#{} 形式的表达式可以被用来在字符串中添加动态值：
//cscc
p:before {
  content: "I ate #{5 + 10} pies!";
}

/*
//css
p:before {
  content: "I ate 15 pies!";
}
*/

//字符串运算：+可以用来连接字符
//scss
p {
  cursor: e + -resize;
}
/*
//css
p {
  cursor: e-resize;
}
*/

//有引号和无引号的连接规则：遵循+左边字符串的规则
//scss
p:before {
  content: "Foo " + Bar;
  font-family: sans- + "serif";
}

/*
//css
p:before {
  content: "Foo Bar";
  font-family: sans-serif;
}
*/

//空值会被视作空字符串
//scss
$value: null;
p:before {
  content: "I ate #{$value} pies!";
}
/*
//css
p:before {
  content: "I ate  pies!";
}
*/

//@if判断
/*
  除非你的代码中有偏复杂的逻辑，否则没必要在日常开发的样式表中使用条件语句。实际上，条件语句主要适用于库和框架。
  无论何时，如果你感觉需要它们，请遵守下述准则：

  除非必要，不然不需要括号；
  务必在 @if 之前添加空行；
  务必在左开大括号( { )后换行；
  @else 语句和它前面的右闭大括号( } )写在同一行；
  务必在右闭大括号( } )后添加空行，除非下一行还是右闭大括号( } )，那么就在最后一个右闭大括号( } )后添加空行。
*/
//scss
p {
  @if 1 + 1 == 2 {
    border: 1px solid;
  }
  @if 5 < 3 {
    border: 2px dotted;
  }
  @if null {
    border: 3px double;
  }
}
/*
//css
p {
  border: 1px solid;
}
*/

//@if @else结合使用方法
//scss
p {
  @if 1 + 1 == 2 {
    width: 30px;
  } @else {
    width: 100px;
  }
}
/*
//css
p {
  width: 30px;
}
*/

//三目运算符
/*
  if($condition, $condition_true, $condition_false)
  三个参数分别表示：条件，条件为真的值，条件为假的值。
*/
//scss
$fontBold: true;
p {
  font-weight: if($fontBold, bold, normal);
}

/*
//css
p {
  font-weight: bold;
}
*/

//for循环
//在 Sass 中，可以使用 @for 循环来完成。
//在 Sass 的 @for 循环中有两种方式：

//@for $i from start through end
//@for $i from start to end
//$i 表示变量 start 表示起始值 end 表示结束值
//这两个的区别是关键字 through 表示包括 end 这个数，而 to 则不包括 end 这个数。

//如下代码，先来个使用 through 关键字的例子：
//scss
@for $i from 1 through 3 {
  .item-#{$i} {
    width: 2em * $i;
  }
}

/*
//css
.item-1 {
  width: 2em;
}

.item-2 {
  width: 4em;
}

.item-3 {
  width: 6em;
}
*/

//再来个 to 关键字的例子：
//scss
@for $i from 1 to 3 {
  .item-#{$i} {
    width: 2em * $i;
  }
}

/*
//css
.item-1 {
  width: 2em;
}
.item-2 {
  width: 4em;
}
*/

//@each 循环就是去遍历一个列表，然后从列表中取出对应的值。
//@each 循环指令的形式： @each $var in < list >

//在下面的例子中你可以看到，$var 就是一个变量名，< list > 是一个 SassScript 表达式，他将返回一个列表值。变量 $var 会在列表中做遍历，并且遍历出与 $var 对应的样式块。

//scss
@each $animal in puma, egret, salamander {
  .#{$animal}-icon {
    background-image: url('/course/565c0c2abc27d77730c072b3/img/#{$animal}.png');
  }
}

/*
//css
.puma-icon {
  background-image: url('/course/565c0c2abc27d77730c072b3/img/puma.png');
}
.egret-icon {
  background-image: url('/course/565c0c2abc27d77730c072b3/img/egret.png');
}
.salamander-icon {
  background-image: url('/course/565c0c2abc27d77730c072b3/img/salamander.png');
}
*/

//while循环
//@while 指令也需要 SassScript 表达式（像其他指令一样），并且会生成不同的样式块，直到表达式值为 false 时停止循环。这个和 @for 指令很相似，只要 @while 后面的条件为 true 就会执行。
//SCSS
$i: 6;
@while $i > 0 {
  .item-#{$i} {
    width: 2em * $i;
  }
  $i: $i - 2;
}
/*
//css
.item-6 {
  width: 12em;
}
.item-4 {
  width: 8em;
}
.item-2 {
  width: 4em;
}
*/